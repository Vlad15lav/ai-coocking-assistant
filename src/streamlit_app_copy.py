import os
import asyncio
import streamlit as st

from langchain_openai import ChatOpenAI
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS

from model.agent import AgentSystem
from tools.downloader import download_from_yandex
from tools.utils import spech2text


@st.cache_resource
def load_agent():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –∏–∑ cache streamlit
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM
    llm = ChatOpenAI(
        base_url="https://api.groq.com/openai/v1",
        model="llama-3.1-70b-versatile",
        api_key=os.environ.get("OPENAI_API_KEY"),
        temperature=0.0
    )

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ FAISS –∏–Ω–¥–µ–∫—Å–∞
    faiss_index_path = "data/processed/food_faiss_index"

    if not os.path.exists(faiss_index_path + "index.faiss"):
        download_from_yandex(
            public_link="https://disk.yandex.ru/d/P2qlEw1CgZNMIA",
            save_path=faiss_index_path
            )

    if not os.path.exists(faiss_index_path + "index.pkl"):
        download_from_yandex(
            public_link="https://disk.yandex.ru/d/W-P2GCK64yNufQ",
            save_path=faiss_index_path
            )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞
    db = FAISS.load_local(
        folder_path="data/processed/food_faiss_index",
        embeddings=HuggingFaceEmbeddings(model_name="sergeyzh/LaBSE-ru-turbo"),
        allow_dangerous_deserialization=True
    )

    retriever = db.as_retriever(
        search_type="similarity",
        search_kwargs={'k': 3}
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
    agent_executor = AgentSystem(llm=llm, retriever=retriever)

    return agent_executor


# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
        page_title="AI Coocking Assistant | Chat",
        page_icon="ü§ñ",
        layout="wide"
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
# agent_executor = load_agent()

# –õ–µ–≤—ã–π sidebar
with st.sidebar:
    st.title("üç≥ AI Coocking Assistant ü§ñ")
    st.subheader("Your Smart Kitchen Guide")
    st.markdown(
        """
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **AI Cooking Assistant**
        ‚Äî –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ö–æ–Ω–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞,
        —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞,
        –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏
        —É–¥–∏–≤–ª—è—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏!

        –≠—Ç–æ—Ç –≤—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        **Large Language Model** ü§ñ –∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ **LangChain** ü¶úüîó,
        —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—Ü–µ–ø—Ç–∞–º,
        —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–ª—é–¥–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
        –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.
        """
    )
    # –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥
    audio_input = st.experimental_audio_input("–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ üéôÔ∏è")

st.title("ü§ñAI ChatBotüí¨ (Online üü¢)")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if "messages" not in st.session_state:
    st.session_state.messages = []

# –í–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
text_input = st.chat_input("–ö–∞–∫–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?")

# –í—ã–≤–æ–¥ —á–∞—Ç–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        if isinstance(message["content"], str):
            st.markdown(message["content"])
        else:
            image_content = message["content"]

            st.image(
                image=image_content['image'],
                caption=image_content['caption']
                )

# –õ–æ–≥–∏–∫–∞ ChatBot
if text_input or audio_input:
    user_query = text_input
    if text_input is None:
        speech_text = asyncio.run(spech2text(audio_file=audio_input))
        user_query = speech_text['text'].strip()

    # –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with st.chat_message("user"):
        st.markdown(user_query)

    st.session_state.messages.append(
        {
            "role": "user",
            "content": user_query
        })

    # –í—ã–∑–æ–≤ –∞–≥–µ–Ω—Ç–∞
    agent_result = None #agent_executor.invoke(user_query)

    # –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
    with st.chat_message("assistant"):
        if isinstance(agent_result['output'], str):
            agent_content = agent_result['output']

            st.markdown(agent_result['output'])
        elif agent_result['output'] is None:
            agent_content = "–ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å, " + \
                "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ!üòì"

            st.markdown(agent_content)
        else:
            agent_content = {
                "image": agent_result['output'],
                "caption": "–ò—Å—Ç–æ—á–Ω–∏–∫: " + agent_result['url']
            }

            st.image(
                image=agent_content['image'],
                caption=agent_content['caption']
                )

    st.session_state.messages.append(
        {
            "role": "assistant",
            "content": agent_content
        })
